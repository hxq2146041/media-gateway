/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "gateway"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "gateway"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.0.2"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int daemon_flag;	/**< @brief Launch Gateway in background as a daemon (default=off).  */
  const char *daemon_help; /**< @brief Launch Gateway in background as a daemon help description.  */
  char * pid_file_arg;	/**< @brief Open the specified PID file when starting Gateway (default=none).  */
  char * pid_file_orig;	/**< @brief Open the specified PID file when starting Gateway (default=none) original value given at command line.  */
  const char *pid_file_help; /**< @brief Open the specified PID file when starting Gateway (default=none) help description.  */
  int disable_stdout_flag;	/**< @brief Disable stdout based logging (default=off).  */
  const char *disable_stdout_help; /**< @brief Disable stdout based logging help description.  */
  char * log_file_arg;	/**< @brief Log to the specified file (default=stdout only).  */
  char * log_file_orig;	/**< @brief Log to the specified file (default=stdout only) original value given at command line.  */
  const char *log_file_help; /**< @brief Log to the specified file (default=stdout only) help description.  */
  char * cwd_path_arg;	/**< @brief Working directory for Gateway daemon process (default=/).  */
  char * cwd_path_orig;	/**< @brief Working directory for Gateway daemon process (default=/) original value given at command line.  */
  const char *cwd_path_help; /**< @brief Working directory for Gateway daemon process (default=/) help description.  */
  char * interface_arg;	/**< @brief Interface to use (will be the public IP).  */
  char * interface_orig;	/**< @brief Interface to use (will be the public IP) original value given at command line.  */
  const char *interface_help; /**< @brief Interface to use (will be the public IP) help description.  */
  char * plugins_folder_arg;	/**< @brief Plugins folder (default=./plugins).  */
  char * plugins_folder_orig;	/**< @brief Plugins folder (default=./plugins) original value given at command line.  */
  const char *plugins_folder_help; /**< @brief Plugins folder (default=./plugins) help description.  */
  char * config_arg;	/**< @brief Configuration file to use.  */
  char * config_orig;	/**< @brief Configuration file to use original value given at command line.  */
  const char *config_help; /**< @brief Configuration file to use help description.  */
  char * configs_folder_arg;	/**< @brief Configuration files folder (default=./conf).  */
  char * configs_folder_orig;	/**< @brief Configuration files folder (default=./conf) original value given at command line.  */
  const char *configs_folder_help; /**< @brief Configuration files folder (default=./conf) help description.  */
  char * cert_pem_arg;	/**< @brief DTLS certificate.  */
  char * cert_pem_orig;	/**< @brief DTLS certificate original value given at command line.  */
  const char *cert_pem_help; /**< @brief DTLS certificate help description.  */
  char * cert_key_arg;	/**< @brief DTLS certificate key.  */
  char * cert_key_orig;	/**< @brief DTLS certificate key original value given at command line.  */
  const char *cert_key_help; /**< @brief DTLS certificate key help description.  */
  char * cert_pwd_arg;	/**< @brief DTLS certificate key passphrase (if needed).  */
  char * cert_pwd_orig;	/**< @brief DTLS certificate key passphrase (if needed) original value given at command line.  */
  const char *cert_pwd_help; /**< @brief DTLS certificate key passphrase (if needed) help description.  */
  char * stun_server_arg;	/**< @brief STUN server(:port) to use, if needed (e.g., Gateway behind NAT, default=none).  */
  char * stun_server_orig;	/**< @brief STUN server(:port) to use, if needed (e.g., Gateway behind NAT, default=none) original value given at command line.  */
  const char *stun_server_help; /**< @brief STUN server(:port) to use, if needed (e.g., Gateway behind NAT, default=none) help description.  */
  char * nat_1_1_arg;	/**< @brief Public IP to put in all host candidates, assuming a 1:1 NAT is in place (e.g., Amazon EC2 instances, default=none).  */
  char * nat_1_1_orig;	/**< @brief Public IP to put in all host candidates, assuming a 1:1 NAT is in place (e.g., Amazon EC2 instances, default=none) original value given at command line.  */
  const char *nat_1_1_help; /**< @brief Public IP to put in all host candidates, assuming a 1:1 NAT is in place (e.g., Amazon EC2 instances, default=none) help description.  */
  char * ice_enforce_list_arg;	/**< @brief Comma-separated list of the only interfaces to use for ICE gathering; partial strings are supported (e.g., eth0 or eno1,wlan0, default=none).  */
  char * ice_enforce_list_orig;	/**< @brief Comma-separated list of the only interfaces to use for ICE gathering; partial strings are supported (e.g., eth0 or eno1,wlan0, default=none) original value given at command line.  */
  const char *ice_enforce_list_help; /**< @brief Comma-separated list of the only interfaces to use for ICE gathering; partial strings are supported (e.g., eth0 or eno1,wlan0, default=none) help description.  */
  char * ice_ignore_list_arg;	/**< @brief Comma-separated list of interfaces or IP addresses to ignore for ICE gathering; partial strings are supported (e.g., vmnet8,192.168.0.1,10.0.0.1 or vmnet,192.168., default=vmnet).  */
  char * ice_ignore_list_orig;	/**< @brief Comma-separated list of interfaces or IP addresses to ignore for ICE gathering; partial strings are supported (e.g., vmnet8,192.168.0.1,10.0.0.1 or vmnet,192.168., default=vmnet) original value given at command line.  */
  const char *ice_ignore_list_help; /**< @brief Comma-separated list of interfaces or IP addresses to ignore for ICE gathering; partial strings are supported (e.g., vmnet8,192.168.0.1,10.0.0.1 or vmnet,192.168., default=vmnet) help description.  */
  int ipv6_candidates_flag;	/**< @brief Whether to enable IPv6 candidates or not (experimental) (default=off).  */
  const char *ipv6_candidates_help; /**< @brief Whether to enable IPv6 candidates or not (experimental) help description.  */
  int libnice_debug_flag;	/**< @brief Whether to enable libnice debugging or not (default=off).  */
  const char *libnice_debug_help; /**< @brief Whether to enable libnice debugging or not help description.  */
  int full_trickle_flag;	/**< @brief Do full-trickle instead of half-trickle (default=off).  */
  const char *full_trickle_help; /**< @brief Do full-trickle instead of half-trickle help description.  */
  int ice_lite_flag;	/**< @brief Whether to enable the ICE Lite mode or not (default=off).  */
  const char *ice_lite_help; /**< @brief Whether to enable the ICE Lite mode or not help description.  */
  int ice_tcp_flag;	/**< @brief Whether to enable ICE-TCP or not (warning: only works with ICE Lite) (default=off).  */
  const char *ice_tcp_help; /**< @brief Whether to enable ICE-TCP or not (warning: only works with ICE Lite) help description.  */
  int min_nack_queue_arg;	/**< @brief Minimum size of the NACK queue (in ms) per user for retransmissions, no matter the RTT.  */
  char * min_nack_queue_orig;	/**< @brief Minimum size of the NACK queue (in ms) per user for retransmissions, no matter the RTT original value given at command line.  */
  const char *min_nack_queue_help; /**< @brief Minimum size of the NACK queue (in ms) per user for retransmissions, no matter the RTT help description.  */
  int no_media_timer_arg;	/**< @brief Time (in s) that should pass with no media (audio or video) being received before Gateway notifies you about this.  */
  char * no_media_timer_orig;	/**< @brief Time (in s) that should pass with no media (audio or video) being received before Gateway notifies you about this original value given at command line.  */
  const char *no_media_timer_help; /**< @brief Time (in s) that should pass with no media (audio or video) being received before Gateway notifies you about this help description.  */
  int slowlink_threshold_arg;	/**< @brief Number of lost packets (per s) that should trigger a 'slowlink' Gateway API event to users.  */
  char * slowlink_threshold_orig;	/**< @brief Number of lost packets (per s) that should trigger a 'slowlink' Gateway API event to users original value given at command line.  */
  const char *slowlink_threshold_help; /**< @brief Number of lost packets (per s) that should trigger a 'slowlink' Gateway API event to users help description.  */
  char * rtp_port_range_arg;	/**< @brief Port range to use for RTP/RTCP.  */
  char * rtp_port_range_orig;	/**< @brief Port range to use for RTP/RTCP original value given at command line.  */
  const char *rtp_port_range_help; /**< @brief Port range to use for RTP/RTCP help description.  */
  int twcc_period_arg;	/**< @brief How often (in ms) to send TWCC feedback back to senders, if negotiated (default=200ms).  */
  char * twcc_period_orig;	/**< @brief How often (in ms) to send TWCC feedback back to senders, if negotiated (default=200ms) original value given at command line.  */
  const char *twcc_period_help; /**< @brief How often (in ms) to send TWCC feedback back to senders, if negotiated (default=200ms) help description.  */
  char * server_name_arg;	/**< @brief Public name of this Gateway instance (default=MyJanusInstance).  */
  char * server_name_orig;	/**< @brief Public name of this Gateway instance (default=MyJanusInstance) original value given at command line.  */
  const char *server_name_help; /**< @brief Public name of this Gateway instance (default=MyJanusInstance) help description.  */
  int session_timeout_arg;	/**< @brief Session timeout value, in seconds (default=60).  */
  char * session_timeout_orig;	/**< @brief Session timeout value, in seconds (default=60) original value given at command line.  */
  const char *session_timeout_help; /**< @brief Session timeout value, in seconds (default=60) help description.  */
  int reclaim_session_timeout_arg;	/**< @brief Reclaim session timeout value, in seconds (default=0).  */
  char * reclaim_session_timeout_orig;	/**< @brief Reclaim session timeout value, in seconds (default=0) original value given at command line.  */
  const char *reclaim_session_timeout_help; /**< @brief Reclaim session timeout value, in seconds (default=0) help description.  */
  int debug_level_arg;	/**< @brief Debug/logging level (0=disable debugging, 7=maximum debug level; default=4).  */
  char * debug_level_orig;	/**< @brief Debug/logging level (0=disable debugging, 7=maximum debug level; default=4) original value given at command line.  */
  const char *debug_level_help; /**< @brief Debug/logging level (0=disable debugging, 7=maximum debug level; default=4) help description.  */
  int debug_timestamps_flag;	/**< @brief Enable debug/logging timestamps (default=off).  */
  const char *debug_timestamps_help; /**< @brief Enable debug/logging timestamps help description.  */
  int disable_colors_flag;	/**< @brief Disable color in the logging (default=off).  */
  const char *disable_colors_help; /**< @brief Disable color in the logging help description.  */
  int debug_locks_flag;	/**< @brief Enable debugging of locks/mutexes (very verbose!) (default=off).  */
  const char *debug_locks_help; /**< @brief Enable debugging of locks/mutexes (very verbose!) help description.  */
  char * apisecret_arg;	/**< @brief API secret all requests need to pass in order to be accepted by Gateway (useful when wrapping Gateway API requests in a server, none by default).  */
  char * apisecret_orig;	/**< @brief API secret all requests need to pass in order to be accepted by Gateway (useful when wrapping Gateway API requests in a server, none by default) original value given at command line.  */
  const char *apisecret_help; /**< @brief API secret all requests need to pass in order to be accepted by Gateway (useful when wrapping Gateway API requests in a server, none by default) help description.  */
  int token_auth_flag;	/**< @brief Enable token-based authentication for all requests (default=off).  */
  const char *token_auth_help; /**< @brief Enable token-based authentication for all requests help description.  */
  char * token_auth_secret_arg;	/**< @brief Secret to verify HMAC-signed tokens with, to be used with -A.  */
  char * token_auth_secret_orig;	/**< @brief Secret to verify HMAC-signed tokens with, to be used with -A original value given at command line.  */
  const char *token_auth_secret_help; /**< @brief Secret to verify HMAC-signed tokens with, to be used with -A help description.  */
  int event_handlers_flag;	/**< @brief Enable event handlers (default=off).  */
  const char *event_handlers_help; /**< @brief Enable event handlers help description.  */
  int no_webrtc_encryption_flag;	/**< @brief Disable WebRTC encryption, so no DTLS or SRTP (only for debugging!) (default=off).  */
  const char *no_webrtc_encryption_help; /**< @brief Disable WebRTC encryption, so no DTLS or SRTP (only for debugging!) help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int daemon_given ;	/**< @brief Whether daemon was given.  */
  unsigned int pid_file_given ;	/**< @brief Whether pid-file was given.  */
  unsigned int disable_stdout_given ;	/**< @brief Whether disable-stdout was given.  */
  unsigned int log_file_given ;	/**< @brief Whether log-file was given.  */
  unsigned int cwd_path_given ;	/**< @brief Whether cwd-path was given.  */
  unsigned int interface_given ;	/**< @brief Whether interface was given.  */
  unsigned int plugins_folder_given ;	/**< @brief Whether plugins-folder was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int configs_folder_given ;	/**< @brief Whether configs-folder was given.  */
  unsigned int cert_pem_given ;	/**< @brief Whether cert-pem was given.  */
  unsigned int cert_key_given ;	/**< @brief Whether cert-key was given.  */
  unsigned int cert_pwd_given ;	/**< @brief Whether cert-pwd was given.  */
  unsigned int stun_server_given ;	/**< @brief Whether stun-server was given.  */
  unsigned int nat_1_1_given ;	/**< @brief Whether nat-1-1 was given.  */
  unsigned int ice_enforce_list_given ;	/**< @brief Whether ice-enforce-list was given.  */
  unsigned int ice_ignore_list_given ;	/**< @brief Whether ice-ignore-list was given.  */
  unsigned int ipv6_candidates_given ;	/**< @brief Whether ipv6-candidates was given.  */
  unsigned int libnice_debug_given ;	/**< @brief Whether libnice-debug was given.  */
  unsigned int full_trickle_given ;	/**< @brief Whether full-trickle was given.  */
  unsigned int ice_lite_given ;	/**< @brief Whether ice-lite was given.  */
  unsigned int ice_tcp_given ;	/**< @brief Whether ice-tcp was given.  */
  unsigned int min_nack_queue_given ;	/**< @brief Whether min-nack-queue was given.  */
  unsigned int no_media_timer_given ;	/**< @brief Whether no-media-timer was given.  */
  unsigned int slowlink_threshold_given ;	/**< @brief Whether slowlink-threshold was given.  */
  unsigned int rtp_port_range_given ;	/**< @brief Whether rtp-port-range was given.  */
  unsigned int twcc_period_given ;	/**< @brief Whether twcc-period was given.  */
  unsigned int server_name_given ;	/**< @brief Whether server-name was given.  */
  unsigned int session_timeout_given ;	/**< @brief Whether session-timeout was given.  */
  unsigned int reclaim_session_timeout_given ;	/**< @brief Whether reclaim-session-timeout was given.  */
  unsigned int debug_level_given ;	/**< @brief Whether debug-level was given.  */
  unsigned int debug_timestamps_given ;	/**< @brief Whether debug-timestamps was given.  */
  unsigned int disable_colors_given ;	/**< @brief Whether disable-colors was given.  */
  unsigned int debug_locks_given ;	/**< @brief Whether debug-locks was given.  */
  unsigned int apisecret_given ;	/**< @brief Whether apisecret was given.  */
  unsigned int token_auth_given ;	/**< @brief Whether token-auth was given.  */
  unsigned int token_auth_secret_given ;	/**< @brief Whether token-auth-secret was given.  */
  unsigned int event_handlers_given ;	/**< @brief Whether event-handlers was given.  */
  unsigned int no_webrtc_encryption_given ;	/**< @brief Whether no-webrtc-encryption was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
